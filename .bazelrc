build --action_env=BAZEL_CXXOPTS="-std=c++17"
build --cxxopt='-std=c++17'
build --conlyopt='-std=gnu11'

# Disable the low signal-to-noise ratio warnings
build --copt=-Wno-unused-function

# Disable tool build warnings. The tools are fetched/generated from OSS repos
build --host_copt=-Wno-unused-variable
build --host_copt=-Wno-unused-value
build --host_copt=-Wno-uninitialized
build --host_copt=-O3

# This lets us generate key/value pairs for the workspace which can be used to
# generate the version information.

build --workspace_status_command=utils/get_workspace_status.sh

build --experimental_cc_shared_library
run --java_runtime_version=remotejdk_11
test --java_runtime_version=remotejdk_11

build --repo_env BAZEL_JVM_FETCH_SOURCES=false
run --repo_env BAZEL_JVM_FETCH_SOURCES=false
test --repo_env BAZEL_JVM_FETCH_SOURCES=false

# Skip VCS by default as most workstations will not have licenses.
# Skip renode by default until dependencies can be sandboxed appropriately.
build --build_tag_filters="-vcs,-verilator,-synthesis"
build --action_env=VCS_HOME
build --action_env=VC_STATIC_HOME
build --action_env=VERDI_HOME
build --action_env=LM_LICENSE_FILE
build --action_env=XILINXD_LICENSE_FILE
test --build_tag_filters="-vcs,-verilator,-synthesis"
test --test_tag_filters="-vcs,-verilator,-synthesis"
test --action_env=VCS_HOME
test --action_env=VC_STATIC_HOME
test --action_env=VERDI_HOME
test --action_env=LM_LICENSE_FILE
test --action_env=XILINXD_LICENSE_FILE
run --action_env=VCS_HOME
run --action_env=VC_STATIC_HOME
run --action_env=VERDI_HOME
run --action_env=LM_LICENSE_FILE
run --action_env=XILINXD_LICENSE_FILE

# Add config to enable VCS targets.
build:vcs --build_tag_filters="vcs"
test:vcs --build_tag_filters="vcs"
test:vcs --test_tag_filters="vcs"
run:vcs --build_tag_filters="vcs"
run:vcs --test_tag_filters="vcs"

# Add config to enable synthesis targets.
build:synthesis --build_tag_filters="synthesis"
test:synthesis --build_tag_filters="synthesis"
test:synthesis --test_tag_filters="synthesis"
run:synthesis --build_tag_filters="synthesis"
run:synthesis --test_tag_filters="synthesis"

# Set preprocessor defines for tflite-micro.
build --copt=-DTF_LITE_USE_GLOBAL_CMATH_FUNCTIONS
build --copt=-DTF_LITE_USE_GLOBAL_MIN
build --copt=-DTF_LITE_USE_GLOBAL_MAX
build --copt=-DTF_LITE_MCU_DEBUG_LOG
build:opt --copt=-DTF_LITE_STRIP_ERROR_STRINGS


# Selecting coralnpu platform with custom toolchain.
build:coralnpu_v2 --platforms=//platforms:coralnpu_v2

build --incompatible_enable_cc_toolchain_resolution
build --use_top_level_targets_for_symlinks=false
